{"version":3,"file":"static/js/78.b2318276.chunk.js","mappings":"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","sources":["components/ChatElement.js","components/Search/Search.js","components/Search/SearchIconWrapper.js","components/Search/StyledInputBase.js","layouts/dashboard/BottomNav.js","components/UserElement.js","sections/Dashboard/Friends.js","pages/dashboard/Chats.js"],"sourcesContent":["import React from \"react\";\nimport { Box, Badge, Stack, Avatar, Typography } from \"@mui/material\";\nimport { styled, useTheme, alpha } from \"@mui/material/styles\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { SelectConversation } from \"../redux/slices/app\";\n\nconst truncateText = (string, n) => {\n  return string?.length > n ? `${string?.slice(0, n)}...` : string;\n};\n\nconst StyledChatBox = styled(Box)(({ theme }) => ({\n  \"&:hover\": {\n    cursor: \"pointer\",\n  },\n}));\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: \"#44b700\",\n    color: \"#44b700\",\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      animation: \"ripple 1.2s infinite ease-in-out\",\n      border: \"1px solid currentColor\",\n      content: '\"\"',\n    },\n  },\n  \"@keyframes ripple\": {\n    \"0%\": {\n      transform: \"scale(.8)\",\n      opacity: 1,\n    },\n    \"100%\": {\n      transform: \"scale(2.4)\",\n      opacity: 0,\n    },\n  },\n}));\n\nconst ChatElement = ({ img, name, msg, time, unread, online, id }) => {\n  const dispatch = useDispatch();\n  const {room_id} = useSelector((state) => state.app);\n  const selectedChatId = room_id?.toString();\n\n  let isSelected = +selectedChatId === id;\n\n  if (!selectedChatId) {\n    isSelected = false;\n  }\n\n  const theme = useTheme();\n\n  return (\n    <StyledChatBox\n      onClick={() => {\n        dispatch(SelectConversation({room_id: id}));\n      }}\n      sx={{\n        width: \"100%\",\n\n        borderRadius: 1,\n\n        backgroundColor: isSelected\n          ? theme.palette.mode === \"light\"\n            ? alpha(theme.palette.primary.main, 0.5)\n            : theme.palette.primary.main\n          : theme.palette.mode === \"light\"\n          ? \"#fff\"\n          : theme.palette.background.paper,\n      }}\n      p={2}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n      >\n        <Stack direction=\"row\" spacing={2}>\n          {\" \"}\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\"\n            >\n              <Avatar alt={name} src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar alt={name} src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{name}</Typography>\n            <Typography variant=\"caption\">{truncateText(msg, 20)}</Typography>\n          </Stack>\n        </Stack>\n        <Stack spacing={2} alignItems={\"center\"}>\n          <Typography sx={{ fontWeight: 600 }} variant=\"caption\">\n            {time}\n          </Typography>\n          <Badge\n            className=\"unread-count\"\n            color=\"primary\"\n            badgeContent={unread}\n          />\n        </Stack>\n      </Stack>\n    </StyledChatBox>\n  );\n};\n\nexport default ChatElement;\n","import { styled, alpha } from \"@mui/material/styles\";\n\nconst Search = styled(\"div\")(({ theme }) => ({\n  position: \"relative\",\n  borderRadius: 20,\n  backgroundColor: alpha(theme.palette.background.paper, 1),\n  marginRight: theme.spacing(2),\n  marginLeft: 0,\n  width: \"100%\",\n}));\n\nexport default Search;\n","import { styled } from \"@mui/material/styles\";  \n\nconst SearchIconWrapper = styled(\"div\")(({ theme }) => ({\n    padding: theme.spacing(0, 2),\n    height: \"100%\",\n    position: \"absolute\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  }));\n\n  export default SearchIconWrapper;\n  ","import { InputBase } from \"@mui/material\";\nimport {styled} from \"@mui/material/styles\";\n\n\n  const StyledInputBase = styled(InputBase)(({ theme }) => ({\n    color: \"inherit\",\n    \"& .MuiInputBase-input\": {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n      width: \"100%\",\n    },\n  }));\n\n  export default StyledInputBase;","import React from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Box, IconButton, Stack } from \"@mui/material\";\nimport ProfileMenu from \"./ProfileMenu\";\nimport { Nav_Buttons } from \"../../data\";\n\nconst BottomNav = () => {\n  const theme = useTheme();\n\n  const [selectedTab, setSelectedTab] = React.useState(0);\n\n  const handleChangeTab = (index) => {\n    setSelectedTab(index);\n  };\n\n  return (\n    <Box\n      sx={{\n        zIndex: 10,\n        position: \"absolute\",\n        bottom: 0,\n        width: \"100vw\",\n\n        backgroundColor: theme.palette.background.paper,\n        boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n      }}\n    >\n      <Stack\n        sx={{ width: \"100%\" }}\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n        spacing={2}\n        p={2}\n      >\n        {Nav_Buttons.map((el) => {\n          return el.index === selectedTab ? (\n            <Box sx={{ backgroundColor: theme.palette.primary.main, borderRadius: 1.5 }} p={1}>\n              <IconButton sx={{ width: \"max-content\", color: \"#ffffff\" }}>\n                {el.icon}\n              </IconButton>\n            </Box>\n          ) : (\n            <IconButton\n              onClick={() => {\n                handleChangeTab(el.index);\n              }}\n              sx={{\n                width: \"max-content\",\n                color:\n                  theme.palette.mode === \"light\"\n                    ? \"#080707\"\n                    : theme.palette.text.primary,\n              }}\n            >\n              {el.icon}\n            </IconButton>\n          );\n        })}\n        <ProfileMenu />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default BottomNav;\n","import React from \"react\";\nimport {\n  Box,\n  Badge,\n  Stack,\n  Avatar,\n  Typography,\n  IconButton,\n  Button,\n} from \"@mui/material\";\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport { Chat } from \"phosphor-react\";\nimport { socket } from \"../socket\";\n\nconst user_id = window.localStorage.getItem(\"user_id\");\n\nconst StyledChatBox = styled(Box)(({ theme }) => ({\n  \"&:hover\": {\n    cursor: \"pointer\",\n  },\n}));\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n  \"& .MuiBadge-badge\": {\n    backgroundColor: \"#44b700\",\n    color: \"#44b700\",\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    \"&::after\": {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      borderRadius: \"50%\",\n      animation: \"ripple 1.2s infinite ease-in-out\",\n      border: \"1px solid currentColor\",\n      content: '\"\"',\n    },\n  },\n  \"@keyframes ripple\": {\n    \"0%\": {\n      transform: \"scale(.8)\",\n      opacity: 1,\n    },\n    \"100%\": {\n      transform: \"scale(2.4)\",\n      opacity: 0,\n    },\n  },\n}));\n\nconst UserElement = ({ img, firstName, lastName, online, _id }) => {\n  const theme = useTheme();\n\n  const name = `${firstName} ${lastName}`;\n\n  return (\n    <StyledChatBox\n      sx={{\n        width: \"100%\",\n\n        borderRadius: 1,\n\n        backgroundColor: theme.palette.background.paper,\n      }}\n      p={2}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n      >\n        <Stack direction=\"row\" alignItems={\"center\"} spacing={2}>\n          {\" \"}\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\"\n            >\n              <Avatar alt={name} src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar alt={name} src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{name}</Typography>\n          </Stack>\n        </Stack>\n        <Stack direction={\"row\"} spacing={2} alignItems={\"center\"}>\n          <Button\n            onClick={() => {\n              socket.emit(\"friend_request\", { to: _id, from: user_id }, () => {\n                alert(\"request sent\");\n              });\n            }}\n          >\n            Send Request\n          </Button>\n        </Stack>\n      </Stack>\n    </StyledChatBox>\n  );\n};\n\nconst FriendRequestElement = ({\n  img,\n  firstName,\n  lastName,\n  incoming,\n  missed,\n  online,\n  id,\n}) => {\n  const theme = useTheme();\n\n  const name = `${firstName} ${lastName}`;\n\n  return (\n    <StyledChatBox\n      sx={{\n        width: \"100%\",\n\n        borderRadius: 1,\n\n        backgroundColor: theme.palette.background.paper,\n      }}\n      p={2}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n      >\n        <Stack direction=\"row\" alignItems={\"center\"} spacing={2}>\n          {\" \"}\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\"\n            >\n              <Avatar alt={name} src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar alt={name} src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{name}</Typography>\n          </Stack>\n        </Stack>\n        <Stack direction={\"row\"} spacing={2} alignItems={\"center\"}>\n          <Button\n            onClick={() => {\n              //  emit \"accept_request\" event\n              socket.emit(\"accept_request\", { request_id: id });\n            }}\n          >\n            Accept Request\n          </Button>\n        </Stack>\n      </Stack>\n    </StyledChatBox>\n  );\n};\n\n// FriendElement\n\nconst FriendElement = ({\n  img,\n  firstName,\n  lastName,\n  incoming,\n  missed,\n  online,\n  _id,\n}) => {\n  const theme = useTheme();\n\n  const name = `${firstName} ${lastName}`;\n\n  return (\n    <StyledChatBox\n      sx={{\n        width: \"100%\",\n\n        borderRadius: 1,\n\n        backgroundColor: theme.palette.background.paper,\n      }}\n      p={2}\n    >\n      <Stack\n        direction=\"row\"\n        alignItems={\"center\"}\n        justifyContent=\"space-between\"\n      >\n        <Stack direction=\"row\" alignItems={\"center\"} spacing={2}>\n          {\" \"}\n          {online ? (\n            <StyledBadge\n              overlap=\"circular\"\n              anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\n              variant=\"dot\"\n            >\n              <Avatar alt={name} src={img} />\n            </StyledBadge>\n          ) : (\n            <Avatar alt={name} src={img} />\n          )}\n          <Stack spacing={0.3}>\n            <Typography variant=\"subtitle2\">{name}</Typography>\n          </Stack>\n        </Stack>\n        <Stack direction={\"row\"} spacing={2} alignItems={\"center\"}>\n          <IconButton\n            onClick={() => {\n              // start a new conversation\n              socket.emit(\"start_conversation\", { to: _id, from: user_id });\n            }}\n          >\n            <Chat />\n          </IconButton>\n        </Stack>\n      </Stack>\n    </StyledChatBox>\n  );\n};\n\nexport { UserElement, FriendRequestElement, FriendElement };\n","import React, { useEffect } from \"react\";\nimport { Dialog, DialogContent, Slide, Stack, Tab, Tabs } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  FetchFriendRequests,\n  FetchFriends,\n  FetchUsers,\n} from \"../../redux/slices/app\";\nimport { FriendElement, FriendRequestElement, UserElement } from \"../../components/UserElement\";\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst UsersList = () => {\n  const dispatch = useDispatch();\n\n  const { users } = useSelector((state) => state.app);\n\n  useEffect(() => {\n    dispatch(FetchUsers());\n  }, []);\n\n  return (\n    <>\n      {users.map((el, idx) => {\n        return <UserElement key={idx} {...el} />;\n      })}\n    </>\n  );\n};\n\nconst FriendsList = () => {\n  const dispatch = useDispatch();\n\n  const { friends } = useSelector((state) => state.app);\n\n  useEffect(() => {\n    dispatch(FetchFriends());\n  }, []);\n\n  return (\n    <>\n      {friends.map((el, idx) => {\n        return <FriendElement key={idx} {...el} />;\n      })}\n    </>\n  );\n};\n\nconst RequestsList = () => {\n  const dispatch = useDispatch();\n\n  const { friendRequests } = useSelector((state) => state.app);\n\n  useEffect(() => {\n    dispatch(FetchFriendRequests());\n  }, []);\n\n  return (\n    <>\n      {friendRequests.map((el, idx) => {\n        return <FriendRequestElement key={idx} {...el.sender} id={el._id} />;\n      })}\n    </>\n  );\n};\n\nconst Friends = ({ open, handleClose }) => {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <Dialog\n      fullWidth\n      maxWidth=\"xs\"\n      open={open}\n      TransitionComponent={Transition}\n      keepMounted\n      onClose={handleClose}\n      aria-describedby=\"alert-dialog-slide-description\"\n      sx={{ p: 4 }}\n    >\n      {/* <DialogTitle>{\"Friends\"}</DialogTitle> */}\n      <Stack p={2} sx={{ width: \"100%\" }}>\n        <Tabs value={value} onChange={handleChange} centered>\n          <Tab label=\"Explore\" />\n          <Tab label=\"Friends\" />\n          <Tab label=\"Requests\" />\n        </Tabs>\n      </Stack>\n      <DialogContent>\n        <Stack sx={{ height: \"100%\" }}>\n          <Stack spacing={2.4}>\n            {(() => {\n              switch (value) {\n                case 0: // display all users in this list\n                  return <UsersList />;\n\n                case 1: // display friends in this list\n                  return <FriendsList />;\n\n                case 2: // display request in this list\n                  return <RequestsList />;\n\n                default:\n                  break;\n              }\n            })()}\n          </Stack>\n        </Stack>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default Friends;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Divider,\n  IconButton,\n  Stack,\n  Typography,\n} from \"@mui/material\";\nimport {\n  ArchiveBox,\n  CircleDashed,\n  MagnifyingGlass,\n  Users,\n} from \"phosphor-react\";\nimport { SimpleBarStyle } from \"../../components/Scrollbar\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useResponsive from \"../../hooks/useResponsive\";\nimport BottomNav from \"../../layouts/dashboard/BottomNav\";\nimport { ChatList } from \"../../data\";\nimport ChatElement from \"../../components/ChatElement\";\nimport {\n  Search,\n  SearchIconWrapper,\n  StyledInputBase,\n} from \"../../components/Search\";\nimport Friends from \"../../sections/Dashboard/Friends\";\nimport { socket } from \"../../socket\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { FetchDirectConversations } from \"../../redux/slices/conversation\";\n\nconst user_id = window.localStorage.getItem(\"user_id\");\n\nconst Chats = () => {\n  const theme = useTheme();\n  const isDesktop = useResponsive(\"up\", \"md\");\n\n  const dispatch = useDispatch();\n\n  const {conversations} = useSelector((state) => state.conversation.direct_chat);\n\n  useEffect(() => {\n    socket.emit(\"get_direct_conversations\", { user_id }, (data) => {\n // this data is the list of conversations\n      // dispatch action\n\n      dispatch(FetchDirectConversations({ conversations: data }));\n    });\n  }, []);\n\n  const [openDialog, setOpenDialog] = useState(false);\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n  };\n  const handleOpenDialog = () => {\n    setOpenDialog(true);\n  };\n\n  return (\n    <>\n      <Box\n        sx={{\n          position: \"relative\",\n          height: \"100%\",\n          width: isDesktop ? 320 : \"100vw\",\n          backgroundColor:\n            theme.palette.mode === \"light\"\n              ? \"#F8FAFF\"\n              : theme.palette.background,\n\n          boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\n        }}\n      >\n        {!isDesktop && (\n          // Bottom Nav\n          <BottomNav />\n        )}\n\n        <Stack p={3} spacing={2} sx={{ maxHeight: \"100vh\" }}>\n          <Stack\n            alignItems={\"center\"}\n            justifyContent=\"space-between\"\n            direction=\"row\"\n          >\n            <Typography variant=\"h5\">Chats</Typography>\n\n            <Stack direction={\"row\"} alignItems=\"center\" spacing={1}>\n              <IconButton\n                onClick={() => {\n                  handleOpenDialog();\n                }}\n                sx={{ width: \"max-content\" }}\n              >\n                <Users />\n              </IconButton>\n              <IconButton sx={{ width: \"max-content\" }}>\n                <CircleDashed />\n              </IconButton>\n            </Stack>\n          </Stack>\n          <Stack sx={{ width: \"100%\" }}>\n            <Search>\n              <SearchIconWrapper>\n                <MagnifyingGlass color=\"#709CE6\" />\n              </SearchIconWrapper>\n              <StyledInputBase\n                placeholder=\"Search…\"\n                inputProps={{ \"aria-label\": \"search\" }}\n              />\n            </Search>\n          </Stack>\n          <Stack spacing={1}>\n            <Stack direction={\"row\"} spacing={1.5} alignItems=\"center\">\n              <ArchiveBox size={24} />\n              <Button variant=\"text\">Archive</Button>\n            </Stack>\n            <Divider />\n          </Stack>\n          <Stack sx={{ flexGrow: 1, overflow: \"scroll\", height: \"100%\" }}>\n            <SimpleBarStyle timeout={500} clickOnTrack={false}>\n              <Stack spacing={2.4}>\n                {/* <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                  Pinned\n                </Typography> */}\n                {/* Chat List */}\n                {/* {ChatList.filter((el) => el.pinned).map((el, idx) => {\n                  return <ChatElement {...el} />;\n                })} */}\n                <Typography variant=\"subtitle2\" sx={{ color: \"#676667\" }}>\n                  All Chats\n                </Typography>\n                {/* Chat List */}\n                {conversations.filter((el) => !el.pinned).map((el, idx) => {\n                  return <ChatElement {...el} />;\n                })}\n              </Stack>\n            </SimpleBarStyle>\n          </Stack>\n        </Stack>\n      </Box>\n      {openDialog && (\n        <Friends open={openDialog} handleClose={handleCloseDialog} />\n      )}\n    </>\n  );\n};\n\nexport default Chats;\n"],"names":["StyledChatBox","styled","Box","theme","cursor","StyledBadge","Badge","backgroundColor","color","boxShadow","palette","background","paper","position","top","left","width","height","borderRadius","animation","border","content","transform","opacity","img","name","msg","time","unread","online","id","dispatch","useDispatch","room_id","useSelector","state","app","selectedChatId","toString","isSelected","string","n","useTheme","onClick","SelectConversation","sx","mode","alpha","primary","main","p","direction","alignItems","justifyContent","spacing","overlap","anchorOrigin","vertical","horizontal","variant","alt","src","length","slice","fontWeight","className","badgeContent","marginRight","marginLeft","padding","pointerEvents","display","InputBase","paddingLeft","React","selectedTab","setSelectedTab","zIndex","bottom","Stack","Nav_Buttons","el","index","IconButton","icon","text","ProfileMenu","user_id","window","localStorage","getItem","UserElement","firstName","lastName","_id","Avatar","Typography","Button","socket","to","from","alert","FriendRequestElement","incoming","missed","request_id","FriendElement","Transition","props","ref","Slide","UsersList","users","useEffect","FetchUsers","map","idx","FriendsList","friends","FetchFriends","RequestsList","friendRequests","FetchFriendRequests","sender","open","handleClose","value","setValue","Dialog","fullWidth","maxWidth","TransitionComponent","keepMounted","onClose","Tabs","onChange","event","newValue","centered","Tab","label","DialogContent","isDesktop","useResponsive","conversations","conversation","direct_chat","data","FetchDirectConversations","useState","openDialog","setOpenDialog","maxHeight","Search","placeholder","inputProps","size","Divider","flexGrow","overflow","timeout","clickOnTrack","filter","pinned","ChatElement"],"sourceRoot":""}